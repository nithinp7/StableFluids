
#version 450

layout(local_size_x = 16, local_size_y = 16) in;
layout(set=0, binding=0, r16f) uniform readonly image2D divergenceField;
layout(set=0, binding=1, r16f) uniform readonly image2D prevPressureField;
layout(set=0, binding=2) uniform writeonly image2D pressureField;

layout(push_constant) uniform PushConstants {
  int width;
  int height;
  float dt;
  float sorOmega;
  float density;
  float vorticity;
  bool clear;
} pushConstants;

void main() {
  ivec2 texelPos = ivec2(gl_GlobalInvocationID.xy);
  if (texelPos.x < 0 || texelPos.x >= pushConstants.width ||
      texelPos.y < 0 || texelPos.y >= pushConstants.height) {
    return;
  }
  
  float div = imageLoad(divergenceField, texelPos).r;
  float p = imageLoad(prevPressureField, texelPos).r;
  float pR = imageLoad(prevPressureField, texelPos + ivec2(2, 0)).r;
  float pL = imageLoad(prevPressureField, texelPos + ivec2(-2, 0)).r;
  float pU = imageLoad(prevPressureField, texelPos + ivec2(0, 2)).r;
  float pD = imageLoad(prevPressureField, texelPos + ivec2(0, -2)).r;

  // Update pressure
  p = (1.0 - pushConstants.sorOmega) * p + pushConstants.sorOmega * 0.25 * (div + pR + pL + pU + pD);
  // p = mix(p, 0.25 * (div + pR + pL + pU + pD), pushConstants.sorOmega); 

  if (pushConstants.clear) {
    p = 0.0;
  }

  imageStore(pressureField, texelPos, vec4(p, 0.0, 0.0, 1.0));
}




