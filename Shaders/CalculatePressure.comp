
#version 450

layout(local_size_x = 16, local_size_y = 16) in;
layout(set=0, binding=0, r16f) uniform readonly image2D divergenceField;
layout(set=0, binding=1, r16f) uniform readonly image2D prevPressureField;
layout(set=0, binding=2) uniform writeonly image2D pressureField;

layout(push_constant) uniform PushConstants {
  int width;
  int height;
  float dt;
  float sorOmega;
  float density;
  float vorticity;
  bool clear;
} pushConstants;

float loadP(ivec2 pos) {
  pos.x = 
      (pos.x < pushConstants.width) ? 
        (pos.x < 0) ? 
          abs(pos.x) - 1 : 
          pos.x : 
        (2 * pushConstants.width - pos.x - 1);
  pos.y = 
      (pos.y < pushConstants.height) ? 
        (pos.y < 0) ? 
          abs(pos.y) - 1 : 
          pos.y : 
        (2 * pushConstants.height - pos.y - 1);
  // pos = clamp(pos, ivec2(0), ivec2(pushConstants.width - 1, pushConstants.height - 1));

  return imageLoad(prevPressureField, pos).r;  
}

void main() {
  ivec2 texelPos = ivec2(gl_GlobalInvocationID.xy);
  if (texelPos.x < 0 || texelPos.x >= pushConstants.width ||
      texelPos.y < 0 || texelPos.y >= pushConstants.height) {
    return;
  }
  
  float div = imageLoad(divergenceField, texelPos).r;
  float p = loadP(texelPos);
  float pR = loadP(texelPos + ivec2(2, 0));
  float pL = loadP(texelPos + ivec2(-2, 0));
  float pU = loadP(texelPos + ivec2(0, 2));
  float pD = loadP(texelPos + ivec2(0, -2));

  float h = max(1.0 / pushConstants.width, 1.0 / pushConstants.height);

  // Update pressure
  p = 0.25 * (pR + pL + pU + pD - div * h * h);

  if (pushConstants.clear) {
    p = 0.0;
  }

  imageStore(pressureField, texelPos, vec4(p, 0.0, 0.0, 1.0));
}




