
#version 450

#include "SimulationCommon.glsl"
#include "Fractals.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

#define phase push.params0

#define pressureA _r16fimageHeap[simUniforms.pressureFieldImage + phase]
#define pressureB _r16fimageHeap[simUniforms.pressureFieldImage + (1 - phase)]

float loadP(ivec2 pos) {
  // TODO: Correct for aspect ratio
  // float zoom = 4.0 + simUniforms.time * 2.0;
  // vec2 offs = vec2(-0.706835, 0.235839);//
  // vec2 c = (
  //     2.0 * vec2(pos) / float(simUniforms.width)
  //     - vec2(1.0)) / zoom
  //     + offs;
  // float f = mandelbrot(c);
  
  // if (f < 1.0 && f > 0.5) {
  //   return -0.001;
  // }
  // if (fractal == 1.0) {
  //   return 0.001;
  // }
  // if (pos.x < 20 && pos.y < 20) {
  //   return -0.001;
  // }
  
  pos.x = 
      (pos.x < simUniforms.width) ? 
        (pos.x < 0) ? 
          abs(pos.x) - 1 : 
          pos.x : 
        (2 * simUniforms.width - pos.x - 1);
  pos.y = 
      (pos.y < simUniforms.height) ? 
        (pos.y < 0) ? 
          abs(pos.y) - 1 : 
          pos.y : 
        (2 * simUniforms.height - pos.y - 1);
  // pos = clamp(pos, ivec2(0), ivec2(simUniforms.width - 1, simUniforms.height - 1));

  return imageLoad(pressureA, pos).r;  
}

void main() {
  ivec2 texelPos = ivec2(gl_GlobalInvocationID.xy);
  if (texelPos.x < 0 || texelPos.x >= simUniforms.width ||
      texelPos.y < 0 || texelPos.y >= simUniforms.height) {
    return;
  }
  
  float div = imageLoad(divergenceFieldImage, texelPos).r;
  float p = loadP(texelPos);
  float pR = loadP(texelPos + ivec2(2, 0));
  float pL = loadP(texelPos + ivec2(-2, 0));
  float pU = loadP(texelPos + ivec2(0, 2));
  float pD = loadP(texelPos + ivec2(0, -2));

  float h = max(1.0 / simUniforms.width, 1.0 / simUniforms.height);

  // Update pressure
  p = 0.25 * (pR + pL + pU + pD - div * h * h);
  // p = mix(loadP(texelPos), 0.25 * (pR + pL + pU + pD - div * h * h), 0.9);

  if (isClearFlagSet()) {
    p = 0.0;
  }

  imageStore(pressureB, texelPos, vec4(p, 0.0, 0.0, 1.0));
}




