
#version 450

layout(local_size_x = 16, local_size_y = 16) in;
layout(set=0, binding=0, rg16f) uniform readonly image2D advectedVelocityField;
layout(set=0, binding=1) uniform writeonly image2D divergenceField;

layout(push_constant) uniform PushConstants {
  int width;
  int height;
  float dt;
  float sorOmega;
  float density;
  float vorticity;
  bool clear;
} pushConstants;

void main() {
  ivec2 texelPos = ivec2(gl_GlobalInvocationID.xy);
  if (texelPos.x < 0 || texelPos.x >= pushConstants.width ||
      texelPos.y < 0 || texelPos.y >= pushConstants.height) {
    return;
  }

  vec2 cellDims = vec2(1.0) / vec2(pushConstants.width, pushConstants.height);
  
  // Calculate local divergence
  vec2 vel = imageLoad(advectedVelocityField, texelPos).rg;
  vec2 vR = imageLoad(advectedVelocityField, texelPos + ivec2(1, 0)).rg;
  vec2 vL = imageLoad(advectedVelocityField, texelPos + ivec2(-1, 0)).rg;
  vec2 vU = imageLoad(advectedVelocityField, texelPos + ivec2(0, 1)).rg;
  vec2 vD = imageLoad(advectedVelocityField, texelPos + ivec2(0, -1)).rg;

  float div = 
      -2.0 * pushConstants.density / pushConstants.dt * 
          (cellDims.y * (vR.x - vL.x) + cellDims.x * (vU.y - vD.y));

  if (pushConstants.clear) {
    div = 0.0;
  }

  imageStore(divergenceField, texelPos, vec4(div, 0.0, 0.0, 1.0));
}




