
#version 450

#include "Fractals.glsl"

layout(local_size_x = 16, local_size_y = 16) in;
layout(set=0, binding=0, rg16f) uniform readonly image2D advectedVelocityField;
layout(set=0, binding=1) uniform writeonly image2D divergenceField;

layout(push_constant) uniform PushConstants {
  int width;
  int height;
  float time;
  float dt;
  float sorOmega;
  float density;
  float vorticity;
  bool clear;
  vec2 offset;
  float zoom;
} pushConstants;

vec2 loadVel(ivec2 pos) {
  // TODO: Parameterize grid scale / coords
  vec2 sn = vec2(1.0);
  if (pos.x < 0 || pos.x >= pushConstants.width) {
    sn.x *= -1.0;
  }

  if (pos.y < 0 || pos.y >= pushConstants.height) {
    sn.y *= -1.0;
  }

  pos = clamp(pos, ivec2(0), ivec2(pushConstants.width - 1, pushConstants.height - 1));
  vec2 v = imageLoad(advectedVelocityField, pos).rg;
  return sn * v;
  // pos = clamp(pos, ivec2(0), ivec2(pushConstants.width - 1, pushConstants.height - 1));
  // return imageLoad(advectedVelocityField, pos).rg;
}

void main() {
  ivec2 texelPos = ivec2(gl_GlobalInvocationID.xy);
  if (texelPos.x < 0 || texelPos.x >= pushConstants.width ||
      texelPos.y < 0 || texelPos.y >= pushConstants.height) {
    return;
  }

  float h = max(1.0 / pushConstants.width, 1.0 / pushConstants.height);
  
  // Calculate local divergence  
  vec2 vel = loadVel(texelPos);
  vec2 vR = loadVel(texelPos + ivec2(1, 0));
  vec2 vL = loadVel(texelPos + ivec2(-1, 0));
  vec2 vU = loadVel(texelPos + ivec2(0, 1));
  vec2 vD = loadVel(texelPos + ivec2(0, -1));

  float div = 0.5 / h * (vR.x - vL.x + vU.y - vD.y);

  // // if (texelPos.x < 20 && texelPos.y < 20) {div = 50.0;}

  // // TODO: Correct for aspect ratio
  // float zoom = 12.0 ;//+ pushConstants.time * 2.0;
  // vec2 offs = vec2(-0.706835, 0.235839);//
  // vec2 c = (
  //     2.0 * vec2(texelPos) * h 
  //     - vec2(1.0)) / zoom
  //     + offs;
  // float f = mandelbrot(c);

  // if (f < 1.0 && f > 0.6) {
  //   f *= f * (1.0 - f) * (1.0 - f);
  //   div = -1.0;//5.0 * f;
  // }

  if (pushConstants.clear) {
    div = 0.0;
  }

  imageStore(divergenceField, texelPos, vec4(div, 0.0, 0.0, 1.0));
}




