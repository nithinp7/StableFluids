
#version 450

#include "SimulationCommon.glsl"
#include "Fractals.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

vec2 sampleVel(vec2 uv) {
  vec2 v = texture(velocityFieldTexture, uv).rg;
  if (uv.x < 0 || uv.x > 1.0) {
    return vec2(0.);
  }

  if (uv.y < 0 || uv.y > 1.0) {
    return vec2(0.);
  }

  return v;
}

vec2 duv = vec2(0.0);

vec3 sampleColor(vec2 uv) {
  float f = 1.0 * texture(fractalTexture, uv + duv).r;
  float f2 = 5. * f;//100.0 * f;// * f;//100.0 * f * f;// * f;
  vec3 color = f2 * vec3(cos(5.0 * f + 1.0), sin(5.0 * f + 1.0), sin(5.0 * f + 0.45)) + vec3(1.01 * f2);
  // color.rgb = color.brg;
  color *= color.r;// * 0.5;
  // color.r *= 1.5;
  color.g *= 1.2;
  
  return color;
}
vec2 colorGrad2(vec2 uv, vec2 cellDims, float h) {
  // Calculate color gradient at destination
  vec3 cR = sampleColor(uv + vec2(cellDims.x, 0.0)).rgb;
  vec3 cL = sampleColor(uv + vec2(-cellDims.x, 0.0)).rgb;
  vec3 cU = sampleColor(uv + vec2(0.0, cellDims.y)).rgb;
  vec3 cD = sampleColor(uv + vec2(0.0, -cellDims.y)).rgb;

  return 0.5 * vec2(length(cR - cL), length(cU - cD)) / h;
}

vec2 colorGrad(vec2 uv, vec2 cellDims, float h) {
  // Calculate color gradient at destination
  vec3 cR = texture(colorFieldTexture, uv + vec2(cellDims.x, 0.0)).rgb;
  vec3 cL = texture(colorFieldTexture, uv + vec2(-cellDims.x, 0.0)).rgb;
  vec3 cU = texture(colorFieldTexture, uv + vec2(0.0, cellDims.y)).rgb;
  vec3 cD = texture(colorFieldTexture, uv + vec2(0.0, -cellDims.y)).rgb;

  return 0.5 * vec2(length(cR - cL), length(cU - cD)) / h;
}

void main() {
  ivec2 texelPos = ivec2(gl_GlobalInvocationID.xy);
  if (texelPos.x < 0 || texelPos.x >= simUniforms.width ||
      texelPos.y < 0 || texelPos.y >= simUniforms.height) {
    return;
  }
  
  vec2 cellDims = vec2(1.0) / vec2(simUniforms.width, simUniforms.height);
  float h = max(cellDims.x, cellDims.y);

  vec2 texelPosf = vec2(texelPos) + vec2(0.5);
  vec2 oldTexelPosf = texelPosf;
  if (simUniforms.lastOffset != simUniforms.offset || simUniforms.lastZoom != simUniforms.zoom) {
    // TODO: Handle zoom change as well...
    vec2 c = (2.0 * texelPosf * h - vec2(1.0)) / simUniforms.zoom + simUniforms.offset;
    oldTexelPosf = (simUniforms.lastZoom * (c - simUniforms.lastOffset) + vec2(1.0)) / 2.0 / h;
  }

  // Advect color dye
  vec2 texelUv = oldTexelPosf * cellDims;
  duv = texelPosf * cellDims - texelUv;

  texelUv.x = clamp(texelUv.x, 0.0, 1.0);
  texelUv.y = clamp(texelUv.y, 0.0, 1.0);
  
  const int COLOR_ADV_STEPS = 1;
  float dt = simUniforms.dt / float(COLOR_ADV_STEPS);
  vec2 vel;
  // Integrate backwards through velocity field
  for (int i = 0; i < COLOR_ADV_STEPS; ++i) {
    vec2 colGradMag = colorGrad(texelUv, cellDims, h);
    vel = sampleVel(texelUv);
    // // Reject the portion of the velocity along the color gradient
    // vel -= vel * min(dot(vel, colGradMag), 0.0);
    texelUv -= vel * cellDims / h * dt;
  }

  // vec4 srcColor = texture(colorFieldTexture, texelUv);
  vec4 srcColor = vec4(sampleColor(texelUv), 1.0);

  vec3 txSample = texture(colorFieldTexture, texelUv).rgb;

  float t = 0.99;//length(vel);//0.99;
  if (texelUv.x <= 0 || texelUv.x >= 1.0 ||
      texelUv.y <= 0 || texelUv.y >= 1.0) {
    t = 0.5;
  }

  if (dot(srcColor, srcColor) > 1000.)
    t = 0.0;

  if (bool(simUniforms.inputMask & INPUT_BIT_M))
    t = 1.0;
  
  srcColor.rgb = mix(srcColor.rgb, txSample, t);

  if (isClearFlagSet()) {
    srcColor = vec4(0.0, 0.0, 0.0, 1.0);
  }

  imageStore(advectedColorFieldImage, texelPos, srcColor);
}




