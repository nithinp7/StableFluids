
#version 450

#include "SimulationCommon.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

vec2 cameraVel = vec2(0.0);

vec2 sampleVel(vec2 uv) {
  // TODO: Parameterize grid scale / coords
  vec2 v = texture(velocityFieldTexture, uv).rg;
  vec2 sn = vec2(1.0);
  if (uv.x < 0 || uv.x > 1.0) {
    sn.x *= -1.0;
  }

  if (uv.y < 0 || uv.y > 1.0) {
    sn.y *= -1.0;
  }

  v *= sn;
  vec3 colorSample = texture(colorFieldTexture, uv).rgb;
  float intensity = length(colorSample);
  v.y -= 0.0001 * intensity;// / (intensity + 1.0);

  return v;
}

void main() {
  vec2 uvScale = vec2(1.0) / vec2(simUniforms.width, simUniforms.height);
  float h = max(uvScale.x, uvScale.y);

  ivec2 texelPos = ivec2(gl_GlobalInvocationID.xy);
  if (texelPos.x < 0 || texelPos.x >= simUniforms.width ||
      texelPos.y < 0 || texelPos.y >= simUniforms.height) {
    return;
  }

  vec2 texelPosf = vec2(texelPos) + vec2(0.5);
  if (simUniforms.lastOffset != simUniforms.offset || simUniforms.lastZoom != simUniforms.zoom) {
    // TODO: Handle zoom change as well...
    vec2 c = (2.0 * texelPosf * h - vec2(1.0)) / simUniforms.zoom + simUniforms.offset;
    texelPosf = (simUniforms.lastZoom * (c - simUniforms.lastOffset) + vec2(1.0)) / 2.0 / h;
  }

  vec2 texelUv = texelPosf * uvScale;

  // if (simUniforms.lastOffset != simUniforms.offset || simUniforms.lastZoom != simUniforms.zoom) {
  //   // TODO: Handle zoom change as well...
  //   // texelUv += vec2(0.1);//(simUniforms.offset - simUniforms.lastOffset) / h;
  //   cameraVel = (simUniforms.offset - simUniforms.lastOffset);// / simUniforms.dt;// / uvScale * h / simUniforms.dt;
  // }
  // TODO: Introduce temperature and buoyancy
  // 
  const int ADV_STEPS = 4;
  vec2 vel = sampleVel(texelUv);
  vec2 srcVel = vel;
  vec2 srcUv = texelUv;
  float dt = simUniforms.dt / float(ADV_STEPS);
  for (int i = 0; i < ADV_STEPS; ++i) {
    srcUv -= srcVel * uvScale / h * dt;
    srcVel = sampleVel(srcUv);
    // For testing...
    if (srcUv.x <= 0.01 && srcUv.y > 0.45 && srcUv.y < 0.55) {// && simUniforms.clear) {
      srcVel += vec2(2.0, 0.0) * simUniforms.dt;
    }
  }

  // vec2 vel = sampleVel(texelUv);
  // vec2 srcUv = texelUv - vel * uvScale / h * simUniforms.dt;
  // vec2 srcVel = sampleVel(srcUv);


  // Velocities diagonal to the current cell, used multiple
  // times by the curl computation
  vec2 velLD = sampleVel(texelUv - uvScale);
  vec2 velRD = sampleVel(texelUv + vec2(uvScale.x, -uvScale.y));
  vec2 velRU = sampleVel(texelUv + uvScale);
  vec2 velLU = sampleVel(texelUv + vec2(-uvScale.x, uvScale.y));

  vec2 velLL = sampleVel(texelUv + vec2(-2.0 * uvScale.x, 0.0));
  vec2 velRR = sampleVel(texelUv + vec2(2.0 * uvScale.x, 0.0));
  vec2 velDD = sampleVel(texelUv + vec2(0.0, -2.0 * uvScale.y));
  vec2 velUU = sampleVel(texelUv + vec2(0.0, 2.0 * uvScale.y));

  // TODO: Verify curl orientation (right vs left handed)
  float curlL = velLU.x - velLD.x + velLL.y - vel.y;
  float curlR = velRU.x - velRD.x + vel.y - velRR.y;
  float curlD = vel.x - velDD.x + velLD.y - velRD.y;
  float curlU = velUU.x - vel.x + velLU.y - velRU.y;

  vec2 vortConf = vec2(curlD - curlU, curlR - curlL);
  float vortConfMag = length(vortConf);
  if (vortConfMag > 0.00001) {
    vortConf *= h * simUniforms.vorticity / vortConfMag;
  } else {
    vortConf = vec2(0.0);
  }

  vec2 advVel = srcVel + vortConf;

  if (simUniforms.clear) {
    advVel = vec2(0.0);
  }

  imageStore(advectedVelocityFieldImage, texelPos, vec4(advVel, 0.0, 1.0));
}




