
#version 450

layout(local_size_x = 16, local_size_y = 16) in;
layout(set=0, binding=0, r16f) uniform readonly image2D pressureField;
layout(set=0, binding=1, rg16f) uniform readonly image2D advectedVelocityField;
layout(set=0, binding=2) uniform writeonly image2D velocityField;

layout(push_constant) uniform PushConstants {
  int width;
  int height;
  float dt;
  float sorOmega;
  float density;
  float vorticity;
  bool clear;
} pushConstants;

float loadP(ivec2 pos) {
  pos = clamp(pos, ivec2(0), ivec2(pushConstants.width, pushConstants.height));
  return imageLoad(pressureField, pos).r;
}

void main() {
  ivec2 texelPos = ivec2(gl_GlobalInvocationID.xy);
  if (texelPos.x < 0 || texelPos.x >= pushConstants.width ||
      texelPos.y < 0 || texelPos.y >= pushConstants.height) {
    return;
  }
  
  // Project velocity field to be divergence free

  vec2 cellDims = vec2(1.0) / vec2(pushConstants.width, pushConstants.height);

  vec2 vel = imageLoad(advectedVelocityField, texelPos).rg;
  float pR = loadP(texelPos + ivec2(1, 0));
  float pL = loadP(texelPos + ivec2(-1, 0));
  float pU = loadP(texelPos + ivec2(0, 1));
  float pD = loadP(texelPos + ivec2(0, -1));

  vel -= vec2(pR - pL, pU - pD) * pushConstants.dt / (2.0 * pushConstants.density * cellDims);

  if (pushConstants.clear) {
    vel = vec2(0.0);
  }

  imageStore(velocityField, texelPos, vec4(vel, 0.0, 1.0));
}




